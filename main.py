import os, io, json, uuid, logging, time
import re
from datetime import datetime
import asyncio
from telegram.error import NetworkError
import sys
import nest_asyncio
import pandas as pd
from pytz import timezone
from dotenv import load_dotenv
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)
from telegram.error import BadRequest
import gspread
from google.oauth2.service_account import Credentials
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
import logging

nest_asyncio.apply()  # ‚úÖ evita conflictos en Windows o VSCode

# ======== ENV ========

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
#===========GOOGLE=============
# Google Sheets (opcional espejo)
SPREADSHEET_ID= "1imkrFoVgdzigEewp7St0wSUvnNdqz9BP69dxpCU1ucs"     # ID del spreadsheet
GOOGLE_IMAGES_FOLDER_ID = "1kI6dCip0ytIOH8jf1QazT3RFjtUvbB87"
GCP_SA_JSON = os.getenv("GCP_SA_PATH")     # ruta al service account JSON
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"        # (opcional) si quieres buscar/leer en toda la unidad
]


# Cargar desde variable de entorno (contenido completo del JSON)
GCP_SA_JSON = os.getenv("GCP_SA_PATH")

if not GCP_SA_JSON:
    raise ValueError("‚ö†Ô∏è Variable de entorno GCP_SA_PATH vac√≠a o no definida")

# Convierte el texto JSON a diccionario
service_account_info = json.loads(GCP_SA_JSON)
creds = Credentials.from_service_account_info(service_account_info, scopes=SCOPES)


ORDENES_DF = None  # DataFrame global

# üåç API Key de Google Maps
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")

CARPETA_BASE = "REPORTE_INCIDENCIAS"

SHEET_NAME = "Hoja1"
ENCABEZADOS = [
    "USER_ID", "FECHA", "HORA", "PARTNER", "CUADRILLA", "TICKET", "DNI", "NOMBRE_CLIENTE",
    "NODO", "CODIGO_CAJA", "FOTO_CAJA", "FOTO_CAJA_ABIERTA", "FOTO_MEDICION", "LAT_CAJA", "LNG_CAJA",
    "DEPARTAMENTO", "PROVINCIA", "DISTRITO", "OBS"
]

OBS_OPCIONES = {
    "CTO": [
        "CTO sin potencia",
        "CTO con potencia degradada",
        "CTO Hurtada",
        "CTO sin facilidades",
        "CTO con puertos degradados",
        "CTO con puertos sin potencia",
        "CTO sin tapa",
        "Prevencion de CTO",
        "CTO - Habilitacion de puertos",
        "CTO con intermitencia",
        "CTO con conector mecanico",
        "Reposici√≥n de CTO",
    ],
    "NAP": [
        "NAP sin potencia",
        "NAP con potencia degradada",
        "NAP con puertos degradados",
        "NAP con puertos sin potencia",
        "NAP con rotulo equivocado",
        "NAP sin facilidades",
        "Prevencion de NAP",
        "NAP con intermitencia",
    ],
    "FAT": [
        "FAT sin potencia",
        "FAT con potencia degradada",
        "FAT sin facilidades",
        "FAT con puertos degradados",
        "FAT con puertos sin potencia",
        "FAT con intermitencia",
    ],
}

def _detectar_tipo_por_codigo(codigo: str) -> str | None:
    c = (codigo or "").upper()
    if "CTO" in c: return "CTO"
    if "NAP" in c: return "NAP"
    if "FAT" in c: return "FAT"
    return None


#=========== USUARIOS / GRUPO BOT =========
USUARIOS_DEV = {7175478712, 798153777}
GRUPO_SUPERVISION_ID = [-4829763481]  # si quieres enviar resumen al grupo, pon IDs aqu√≠

# Logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# ======================================
# ‚òÅÔ∏è GOOGLE SHEETS SYNC
# ======================================

def _gs_connect():
    """Conecta a Google Sheets usando Service Account"""
    try:
        gc = gspread.authorize(creds)
        sheet = gc.open_by_key(SPREADSHEET_ID).sheet1
        return sheet
    except gspread.SpreadsheetNotFound:
        logger.error("‚ùå No se encontr√≥ el Google Sheet. Verifica el SPREADSHEET_ID.")
        raise
    except Exception as e:
        logger.error(f"‚ùå Error conectando con Google Sheets: {e}")
        raise

def gs_ensure_headers(sheet):
    """Verifica y crea los encabezados si no existen, sin borrar datos previos."""
    try:
        expected_headers = ENCABEZADOS
        current = sheet.row_values(1)

        # Si la hoja est√° vac√≠a (sin encabezados)
        if not current:
            logger.info("üìÑ Hoja vac√≠a. Creando encabezados...")
            sheet.update([expected_headers], "A1:S1")
            logger.info("‚úÖ Encabezados creados correctamente.")
            return

        # Si los encabezados difieren parcialmente (ajustar columnas sin borrar contenido)
        if current != expected_headers:
            logger.info("üßæ Corrigiendo encabezados sin borrar contenido...")
            # Solo actualiza celdas de encabezado, no borra filas previas
            for i, val in enumerate(expected_headers, start=1):
                if i > len(current) or current[i - 1] != val:
                    sheet.update_cell(1, i, val)
            logger.info("‚úÖ Encabezados actualizados sin borrar filas previas.")
        else:
            logger.debug("üü¢ Encabezados ya est√°n correctos.")

    except Exception as e:
        logger.error(f"‚ùå Error asegurando encabezados en Google Sheets: {e}")


_last_row = None  # variable global arriba del todo

def gs_append_row(fila):
    """Agrega una fila al Google Sheet con tolerancia a errores y evita duplicados inmediatos"""
    global _last_row
    try:
        # Evita duplicado inmediato (misma fila consecutiva)
        if fila == _last_row:
            logger.warning("‚ö†Ô∏è Duplicado inmediato evitado, misma fila ya enviada.")
            return
        _last_row = fila

        if len(fila) < len(ENCABEZADOS): fila += [""] * (len(ENCABEZADOS) - len(fila))
        elif len(fila) > len(ENCABEZADOS): fila = fila[:len(ENCABEZADOS)]

        sheet = _gs_connect()
        try:
            gs_ensure_headers(sheet)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è No se pudieron asegurar encabezados: {e}")

        sheet.append_row(fila, value_input_option="USER_ENTERED")
        logger.info("‚òÅÔ∏è Fila reflejada correctamente en Google Sheets.")

    except gspread.SpreadsheetNotFound:
        logger.error("‚ùå ID de Google Sheet inv√°lido o inexistente.")
    except gspread.exceptions.APIError as e:
        if "PERMISSION_DENIED" in str(e):
            logger.error("üö´ Service Account sin acceso. Comp√°rtelo con permisos de editor.")
        else:
            logger.error(f"‚ùå Error API Google Sheets: {e}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Error reflejando en Google Sheets: {e}")



# ============================================
# üì∏ SUBIDA DE FOTOS A GOOGLE DRIVE (VERSI√ìN BLINDADA)
# ============================================

def ensure_google_folder_imagenes():
    """
    Verifica si existe la carpeta 'IMAGENES' (por ID o nombre).
    Si no existe, la crea y devuelve su ID.
    Compatible con unidades compartidas (supportsAllDrives=True).
    """
    try:
        service = build("drive", "v3", credentials=creds)

        # 1Ô∏è‚É£ Verificar si el ID definido existe y es accesible
        if GOOGLE_IMAGES_FOLDER_ID:
            try:
                f = service.files().get(
                    fileId=GOOGLE_IMAGES_FOLDER_ID,
                    fields="id, name",
                    supportsAllDrives=True
                ).execute()
                logger.info(f"üìÅ Carpeta IMAGENES existente: {f['id']} ({f['name']})")
                return GOOGLE_IMAGES_FOLDER_ID
            except Exception:
                logger.warning("‚ö†Ô∏è La carpeta IMAGENES con el ID definido no existe o no es accesible. Se buscar√° o crear√° una nueva.")

        # 2Ô∏è‚É£ Buscar por nombre 'IMAGENES' en el Drive
        query = "name='IMAGENES' and mimeType='application/vnd.google-apps.folder' and trashed=false"
        results = service.files().list(
            q=query,
            fields="files(id, name)",
            supportsAllDrives=True,
            includeItemsFromAllDrives=True
        ).execute()
        folders = results.get("files", [])

        if folders:
            folder_id = folders[0]["id"]
            logger.info(f"üìÅ Carpeta IMAGENES encontrada por nombre: {folder_id}")
            return folder_id

        # 3Ô∏è‚É£ Crear la carpeta si no existe
        metadata = {
            "name": "IMAGENES",
            "mimeType": "application/vnd.google-apps.folder"
        }
        folder = service.files().create(
            body=metadata,
            fields="id",
            supportsAllDrives=True
        ).execute()
        folder_id = folder["id"]
        logger.info(f"üÜï Carpeta IMAGENES creada en Google Drive: {folder_id}")
        return folder_id

    except Exception as e:
        logger.error(f"‚ùå Error asegurando carpeta IMAGENES: {e}")
        return None


def upload_image_to_google_drive(file_bytes: bytes, filename: str):
    """
    Sube imagen a la carpeta IMAGENES en Google Drive (cre√°ndola si no existe)
    y devuelve su enlace p√∫blico.
    Compatible con unidades compartidas (supportsAllDrives=True).
    """
    try:
        service = build("drive", "v3", credentials=creds)

        # üóÇ Obtener o crear carpeta IMAGENES
        folder_id = ensure_google_folder_imagenes()
        if not folder_id:
            logger.error("‚ùå No se pudo obtener ni crear la carpeta IMAGENES.")
            return None

        # üì§ Subir la imagen
        file_metadata = {
            "name": filename,
            "parents": [folder_id],
            "mimeType": "image/jpeg"
        }
        media = MediaIoBaseUpload(io.BytesIO(file_bytes), mimetype="image/jpeg", resumable=True)
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields="id, webViewLink",
            supportsAllDrives=True
        ).execute()

        # üîì Hacer p√∫blica la imagen
        service.permissions().create(
            fileId=file["id"],
            body={"type": "anyone", "role": "reader"},
            supportsAllDrives=True
        ).execute()

        web_link = file["webViewLink"]
        logger.info(f"‚úÖ Imagen subida correctamente a Google Drive: {web_link}")
        return web_link

    except Exception as e:
        logger.error(f"‚ùå Error subiendo imagen a Google Drive: {e}")
        return None


# ======================================
# üóÇÔ∏è VERIFICAR CARPETA IMAGENES ANTES DE INICIAR EL BOT
# ======================================

def verificar_carpeta_imagenes_inicial():
    try:
        logger.info("üîé Verificando carpeta IMAGENES antes de iniciar el bot...")
        folder_id = ensure_google_folder_imagenes()
        if folder_id:
            logger.info(f"‚úÖ Carpeta IMAGENES lista para usar: {folder_id}")
        else:
            logger.error("‚ùå No se pudo verificar o crear la carpeta IMAGENES. Revisa tus credenciales o permisos.")
    except Exception as e:
        logger.error(f"üí• Error al verificar carpeta IMAGENES: {e}")


# ============================================================
# üìÑ CARGAR ORDENES DE TRABAJO DESDE GOOGLE SHEETS
# ============================================================
def cargar_ordenes_trabajo():
    """
    Lee la pesta√±a 'DatosparaVisitatcnica' del archivo 'Ordenes de trabajo'
    y guarda los datos en un DataFrame global (ORDENES_DF).
    """
    global ORDENES_DF
    try:
        gc = gspread.authorize(creds)

        # üîç Abre el archivo y hoja
        sh = gc.open("Ordenes de trabajo")
        ws = sh.worksheet("DatosparaVisitatcnica")

        # üî¢ Obtiene todos los valores
        values = ws.get_all_values()
        if not values or len(values) < 3:
            logger.warning("‚ö†Ô∏è 'Ordenes de trabajo' est√° vac√≠o o mal formateado.")
            ORDENES_DF = pd.DataFrame()
            return

        # üßπ Omite las 2 primeras filas (t√≠tulos innecesarios)
        headers = [f"COL_{i}" for i in range(len(values[2]))]  # genera encabezados COL_0...COL_n
        data = values[2:]  # a partir de la tercera fila

        # üßæ Crea DataFrame
        ORDENES_DF = pd.DataFrame(data, columns=headers)
        logger.info(f"‚úÖ Cargadas {len(ORDENES_DF)} filas desde 'Ordenes de trabajo'.")

    except Exception as e:
        logger.error(f"‚ùå Error cargando 'Ordenes de trabajo' desde Google Sheets: {e}")
        ORDENES_DF = pd.DataFrame()
        return

# ============================================================
# üîé BUSCAR DATOS POR TICKET
# ============================================================
def buscar_datos_ticket(ticket: str) -> dict | None:
    """
    Busca un ticket en la columna D (COL_3) del DataFrame ORDENES_DF.
    Devuelve datos de la misma fila:
    A ‚Üí NOMBRE_CLIENTE, B ‚Üí CUADRILLA, C ‚Üí DNI, D ‚Üí TICKET, E ‚Üí PARTNER.
    Si no lo encuentra, sugiere usar /recargar.
    """
    global ORDENES_DF
    try:
        if ORDENES_DF is None or ORDENES_DF.empty:
            cargar_ordenes_trabajo()
        if ORDENES_DF is None or ORDENES_DF.empty:
            logger.warning("‚ö†Ô∏è ORDENES_DF vac√≠o, no se puede buscar ticket.")
            return None

        t = str(ticket).strip().upper()
        df = ORDENES_DF.copy()
        # Normaliza
        df["COL_3"] = df["COL_3"].astype(str).str.upper().str.strip()
        # Busca ticket
        fila = df[df["COL_3"].str.contains(t, na=False)]
        if fila.empty:
            logger.info(f"üîç Ticket '{t}' no encontrado.")
            return None

        # ‚úÖ Extraer fila
        row = fila.iloc[0]
        datos = {
            "NOMBRE_CLIENTE": str(row.get("COL_0", "")).strip(),
            "CUADRILLA": str(row.get("COL_1", "")).strip(),
            "DNI": str(row.get("COL_2", "")).strip(),
            "TICKET": str(row.get("COL_3", "")).strip(),
            "PARTNER": str(row.get("COL_4", "")).strip(),
        }

        logger.info(f"‚úÖ Ticket '{t}' encontrado: {datos}")
        return datos

    except Exception as e:
        logger.error(f"‚ùå Error buscando ticket '{ticket}': {e}")
        return None


def cargar_cajas_nodos():
    """Lee el archivo CAJAS_NODOS desde Google Sheets y carga los c√≥digos y nodos."""
    global CAJAS_NODOS
    try:
        logger.info("üìÑ Cargando 'CAJAS_NODOS' desde Google Sheets...")

        # üîê Usa las credenciales globales ya cargadas desde Render (GCP_SA_PATH)
        gc = gspread.authorize(creds)

        # üóÇ Abrir el archivo por nombre
        sh = gc.open("CAJAS_NODOS")

        # ‚úÖ Usa worksheet por nombre exacto (corrige el error 'no attribute Hoja1')
        # Verifica en tu archivo el nombre de la pesta√±a, puede ser "Hoja 1" o "Sheet1"
        ws = sh.worksheet("Hoja1")

        # üìã Leer todos los registros como diccionarios
        data = ws.get_all_records()

        # üß† Crear el diccionario con los c√≥digos y nodos
        CAJAS_NODOS = {
            str(row["CODIGO_CAJA"]).strip().upper(): str(row["NODO"]).strip()
            for row in data if row.get("CODIGO_CAJA") and row.get("NODO")
        }

        logger.info(f"‚úÖ Cargados {len(CAJAS_NODOS)} registros desde 'CAJAS_NODOS'.")

    except Exception as e:
        logger.error(f"‚ùå Error cargando 'CAJAS_NODOS' desde Google Sheets: {e}")
        CAJAS_NODOS = {}


def obtener_nodo_por_codigo(codigo: str) -> str:
    try:
        return CAJAS_NODOS.get(codigo.strip().upper(), "")
    except Exception:
        return ""


# ======================================================
# ======================================================
# üîÑ COMANDO /recargar (solo lectura - abierto a todos)
# ======================================================
async def recargar_bases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Permite recargar manualmente las bases (Ordenes de trabajo y Cajas Nodos)
    desde Google Sheets sin reiniciar el bot.
    Solo lee los datos m√°s recientes, no escribe nada.
    """
    user = update.effective_user
    msg = await update.message.reply_text("‚ôªÔ∏è *Actualizando datos...* ‚è≥", parse_mode="Markdown")

    try:
        # üìÑ Recargar en memoria (solo lectura)
        cargar_ordenes_trabajo()
        cargar_cajas_nodos()

        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=msg.message_id,
            text=(
                "‚ôªÔ∏è *Datos actualizados correctamente.*\n\n"
                "‚úçÔ∏è Ahora puedes volver a ingresar los datos solicitados."
            ),
            parse_mode="Markdown",
        )

        logger.info(f"‚úÖ /recargar ejecutado (solo lectura) por {user.full_name} ({user.id})")

    except Exception as e:
        logger.error(f"‚ùå Error en /recargar: {e}")
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=msg.message_id,
            text=f"‚ùå Error al actualizar datos: {e}",
        )

# =====================================================================
# =====================================================================


# ================== PASOS ===============================================================================
PASOS = {
    "TICKET": {
        "tipo": "texto",
        "mensaje": "üé´ Ingrese el n√∫mero de *TICKET* a registrar:",
        "siguiente": "CODIGO_CAJA",
    },
    "CODIGO_CAJA": {
        "tipo": "texto",
        "mensaje": "üè∑ Ingresa el *C√≥digo de la CTO/NAP/FAT*:",
        "siguiente": "UBICACION_CTO",
    },
    "UBICACION_CTO": {
        "tipo": "ubicacion",
        "mensaje": "üìç Env√≠e la ubicaci√≥n de la CTO/NAP/FAT:",
        "lat_key": "LAT_CAJA",
        "lng_key": "LNG_CAJA",
        "siguiente": "FOTO_CAJA",
    },
    "FOTO_CAJA": {
        "tipo": "foto",
        "mensaje": "üì∏ Env√≠a *foto de la CTO/NAP/FAT con rotulo visible*:",
        "siguiente": "FOTO_CAJA_ABIERTA",
    },
    "FOTO_CAJA_ABIERTA": {
        "tipo": "foto",
        "mensaje": "üì∏ Env√≠a *foto de la CTO/NAP/FAT abierta* mostrando puertos visibles:",
        "siguiente": "FOTO_MEDICION",
    },
    "FOTO_MEDICION": {
        "tipo": "foto",
        "mensaje": "üì∏ Env√≠a *foto de la potencia √≥ptica en dBm. & Œª 1490 nm.* del puerto asignado:",
        "siguiente": "OBS",
    },
    "OBS": {
        "tipo": "menu",
        "mensaje": "üß≠ Selecciona el tipo de observaci√≥n en CTO / NAP / FAT:",
        "instruccion": "üìã Usa el men√∫ para elegir el tipo de observaci√≥n.",
        "siguiente": "RESUMEN_FINAL",
    }
}


PASOS_LISTA = list(PASOS.keys())

ETIQUETAS = {
    "TICKET": "üé´ Ticket",
    "DNI": "ü™™ DNI",
    "NOMBRE_CLIENTE": "üë§ Cliente",
    "CODIGO_CAJA": "üè∑ C√≥digo CTO/NAP/FAT",
    "UBICACION_CTO": "üìç Ubicaci√≥n CTO/NAP/FAT",
    "FOTO_CAJA": "üì∏ Foto CTO/NAP/FAT (Exterior)",
    "FOTO_CAJA_ABIERTA": "üì¶ Foto de CTO/NAP/FAT (Interior)",
    "FOTO_MEDICION": "üìè Foto de medici√≥n √≥ptica (dBm)",
    "OBS": "üìù Observaciones"
}




# ================== UTILS ==================
def get_fecha_hora():
    lima = timezone("America/Lima")
    now = datetime.now(lima)
    return now.strftime("%Y-%m-%d"), now.strftime("%H:%M:%S")

def geocodificar(lat, lng):
    """Devuelve Departamento, Provincia y Distrito usando Google Maps API"""
    if not GOOGLE_MAPS_API_KEY:
        logger.error("‚ùå GOOGLE_MAPS_API_KEY no est√° definido.")
        return "-", "-", "-"

    url = (
        f"https://maps.googleapis.com/maps/api/geocode/json?"
        f"latlng={lat},{lng}&key={GOOGLE_MAPS_API_KEY}&language=es"
    )

    try:
        resp = requests.get(url, timeout=12).json()
    except Exception as e:
        logger.error(f"‚ùå Error en request a Google Maps: {e}")
        return "-", "-", "-"

    if resp.get("status") != "OK" or not resp.get("results"):
        logger.error(f"‚ùå Geocoding fall√≥ ‚Üí {resp.get('status')}, {resp.get('error_message')}")
        return "-", "-", "-"

    comps = resp["results"][0]["address_components"]

    depto, prov, distrito = "-", "-", "-"
    for c in comps:
        t = c.get("types", [])
        if "administrative_area_level_1" in t:   # Departamento (ej. Lima)
            depto = c.get("long_name", "-")
        elif "administrative_area_level_2" in t: # Provincia
            prov = c.get("long_name", "-")
        elif "locality" in t or "administrative_area_level_3" in t or "sublocality_level_1" in t:
            distrito = c.get("long_name", "-")

    # ‚úÖ Validaci√≥n de respaldo
    if distrito == "-" and len(resp["results"]) > 1:
        # Algunos resultados secundarios tienen mayor detalle
        for alt in resp["results"][1:]:
            for c in alt.get("address_components", []):
                if "locality" in c.get("types", []):
                    distrito = c.get("long_name", "-")

    logger.info(f"üìç Geocodificado correctamente: {depto}, {prov}, {distrito}")
    return depto, prov, distrito

def obtener_ubicacion(lat, lng):
    """Devuelve departamento, provincia y distrito usando Google Maps API"""
    url = f"https://maps.googleapis.com/maps/api/geocode/json?latlng={lat},{lng}&key={GOOGLE_MAPS_API_KEY}&language=es"
    response = requests.get(url)
    data = response.json()

    departamento, provincia, distrito = "-", "-", "-"
    if data.get("status") == "OK" and data.get("results"):
        for comp in data["results"][0]["address_components"]:
            if "administrative_area_level_1" in comp["types"]:
                departamento = comp["long_name"]
            elif "administrative_area_level_2" in comp["types"]:
                provincia = comp["long_name"]
            elif "locality" in comp["types"] or "administrative_area_level_3" in comp["types"]:
                distrito = comp["long_name"]
    return departamento, provincia, distrito


# ================== START ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in GRUPO_SUPERVISION_ID:
        return ConversationHandler.END

    registro = context.user_data.get("registro", {})
    if registro.get("ACTIVO", False):
        paso_actual = registro.get("PASO_ACTUAL", PASOS_LISTA[0])
        await update.message.reply_text(
            f"‚ö†Ô∏è Ya tienes un registro en curso.\n\n"
            f"üìå Est√°s en el paso: *{ETIQUETAS.get(paso_actual, paso_actual)}*.\n\n"
            f"üëâ Responde lo solicitado o usa /cancel para anular.",
            parse_mode="Markdown"
        )
        return paso_actual

    # Mensaje de bienvenida
    instrucciones = (
        "üëã *Bienvenido al Bot de Incidencias*\n\n"
        "‚Ä¢ Usa /registro para iniciar un nuevo registro.\n"
        "‚Ä¢ Usa /cancel para cancelar un registro en curso.\n\n"
        "‚ÄºÔ∏è Si ya tienes un registro activo, no podr√°s iniciar otro."
    )
    await update.message.reply_text(instrucciones, parse_mode="Markdown")
    return ConversationHandler.END

async def comando_registro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if chat_id in GRUPO_SUPERVISION_ID:
        return ConversationHandler.END

    reg = context.user_data.get("registro")
    if reg and reg.get("ACTIVO", False):
        paso_actual = reg.get("PASO_ACTUAL", PASOS_LISTA[0])
        await update.message.reply_text(
            f"‚ö†Ô∏è Ya tienes un registro en curso.\n\n"
            f"üìå Est√°s en el paso: *{ETIQUETAS.get(paso_actual, paso_actual)}*.\n\n"
            f"üëâ Responde lo solicitado o usa /cancel para anular.",
            parse_mode="Markdown"
        )
        return paso_actual

    # Crear registro nuevo
    context.user_data["registro"] = {
        "USER_ID": user_id,
        "ID_REGISTRO": str(uuid.uuid4())[:8],
        "ACTIVO": True,
        "PASO_ACTUAL": "TICKET",
    }
    await update.message.reply_text("üé´ Ingrese el *TICKET* a registrar:", parse_mode="Markdown")
    return "TICKET"


# ================== MANEJAR PASO (CORREGIDO) ==================
async def manejar_paso(update: Update, context: ContextTypes.DEFAULT_TYPE, paso: str):
    chat_id = update.effective_chat.id

    # üö´ Evita respuestas del grupo de supervisi√≥n
    if chat_id in GRUPO_SUPERVISION_ID:
        return ConversationHandler.END

    registro = context.user_data.setdefault("registro", {})
    paso_cfg = PASOS.get(paso, {"tipo": "texto"})  # asume tu dict PASOS tiene 'tipo' y 'siguiente'

    # üî∏ CORRECCI√ìN CLAVE üî∏
    # Si el paso actual es OBS ‚Üí abrir men√∫ de observaciones en lugar de pedir texto
    if paso == "OBS":
        logger.info("üü£ Entrando a men√∫ de observaciones desde manejar_paso()")
        await mostrar_menu_obs(chat_id, context, tipo=None)
        registro["PASO_ACTUAL"] = "OBS_TIPO"
        return "OBS_TIPO"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Helper: marcar si venimos de resumen y limpiar el flag
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _marcar_origen_resumen(reg):
        if reg.get("DESDE_RESUMEN", False):
            reg["VOLVER_A_RESUMEN"] = True       # ‚Üê marca intenci√≥n de regresar al resumen tras confirmar
            reg["DESDE_RESUMEN"] = False         # ‚Üê reset inmediato para NO disparar res√∫menes fuera de lugar

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 1) TICKET (texto)
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if paso == "TICKET":
        if not update.message or not update.message.text:
            await update.message.reply_text("‚ö†Ô∏è Debes enviar un n√∫mero de ticket v√°lido.")
            return paso

        ticket = update.message.text.strip().upper()
        registro["TICKET"] = ticket

        _marcar_origen_resumen(registro)

        # Buscar datos del ticket
        datos = buscar_datos_ticket(ticket)
        if datos:
            registro["NOMBRE_CLIENTE"] = datos.get("NOMBRE_CLIENTE", "-")
            registro["DNI"]            = datos.get("DNI", "-")
            registro["CUADRILLA"]      = datos.get("CUADRILLA", "-")
            registro["PARTNER"]        = datos.get("PARTNER", "-")
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è Ticket no encontrado en las √≥rdenes actuales.\n\nüîÑPor favor usa /recargar para actualizar datos.",
                parse_mode="Markdown"
            )
            return "TICKET"

        # Mostrar confirmaci√≥n con botoneras
        msg = (
            f"‚úÖ Datos encontrados para Ticket {ticket}:\n\n"
            f"üë§ Cliente: {registro.get('NOMBRE_CLIENTE', '-')}\n"
            f"ü™™ DNI: {registro.get('DNI', '-')}\n"
            f"üë∑ Cuadrilla: {registro.get('CUADRILLA', '-')}\n"
            f"üè¢ Partner: {registro.get('PARTNER', '-')}\n\n"
            f"¬øEs correcto el *Ticket* ingresado?"
        )
        keyboard = [[
            InlineKeyboardButton("‚úÖ Confirmar", callback_data="CONFIRMAR_TICKET"),
            InlineKeyboardButton("‚úèÔ∏è Corregir",  callback_data="CORREGIR_TICKET"),
        ]]
        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        registro["PASO_ACTUAL"] = "TICKET"
        return "CONFIRMAR"


    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 2) CODIGO_CAJA (texto ‚Üí buscar NODO + detectar tipo)
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if paso == "CODIGO_CAJA":
        if not update.message or not update.message.text:
            await update.message.reply_text("‚ö†Ô∏è Debes enviar un c√≥digo de CTO/NAP/FAT v√°lido.")
            return paso

        _marcar_origen_resumen(registro)

        codigo = update.message.text.strip().upper()
        registro["CODIGO_CAJA"] = codigo

        try:
            nodo = obtener_nodo_por_codigo(codigo)  # ‚Üê tu funci√≥n
        except Exception as e:
            nodo = None
            logger.error(f"‚ùå Error obteniendo nodo para {codigo}: {e}")

        registro["NODO"] = nodo or "-"

        if nodo:
            await update.message.reply_text(f"üì° Nodo encontrado: *{nodo}*", parse_mode="Markdown")

        # Detecci√≥n autom√°tica de tipo de observaci√≥n (opcional)
        try:
            tipo_detectado = _detectar_tipo_por_codigo(codigo)  # ‚Üê tu funci√≥n
        except Exception as e:
            tipo_detectado = None
            logger.warning(f"‚ö†Ô∏è No se pudo detectar tipo por c√≥digo: {e}")

        if tipo_detectado:
            registro["OBS_TIPO"] = tipo_detectado
            await update.message.reply_text(f"üß© Tipo detectado autom√°ticamente: *{tipo_detectado}*", parse_mode="Markdown")

        # Botonera
        msg = (
            f"üè∑ *C√≥digo CTO/NAP/FAT:* {registro['CODIGO_CAJA']}\n"
            f"üì° *Nodo:* {registro.get('NODO','-')}\n\n"
            f"¬øDeseas confirmar o corregir?"
        )
        keyboard = [[
            InlineKeyboardButton("‚úÖ Confirmar", callback_data="CONFIRMAR_CODIGO_CAJA"),
            InlineKeyboardButton("‚úèÔ∏è Corregir",  callback_data="CORREGIR_CODIGO_CAJA"),
        ]]
        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        registro["PASO_ACTUAL"] = "CODIGO_CAJA"
        return "CONFIRMAR"


    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 3) UBICACIONES (cubre pasos de tipo 'ubicacion' v√≠a PASOS)
    #    Debes tener en PASOS[paso] las keys: lat_key, lng_key, siguiente
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if paso_cfg["tipo"] == "ubicacion":
        if not update.message or not update.message.location:
            await update.message.reply_text("‚ö†Ô∏è Debe enviar una *ubicaci√≥n GPS* v√°lida.")
            return paso

        # üí° NUEVO: detectar si viene desde resumen final
        if registro.get("DESDE_RESUMEN", False):
            registro["VOLVER_A_RESUMEN"] = True
            registro["DESDE_RESUMEN"] = False
            logger.info("üîÅ Correcci√≥n de ubicaci√≥n desde resumen ‚Üí volver√° al resumen final tras confirmar")

        _marcar_origen_resumen(registro)

        lat = update.message.location.latitude
        lng = update.message.location.longitude
        registro[paso_cfg["lat_key"]] = lat
        registro[paso_cfg["lng_key"]] = lng

        # Geocodificaci√≥n
        try:
            dep, prov, dist = geocodificar(lat, lng)  # ‚Üê tu funci√≥n
        except Exception as e:
            logger.error(f"‚ùå Error geocodificando: {e}")
            dep = prov = dist = "-"

        registro["DEPARTAMENTO"] = dep or "-"
        registro["PROVINCIA"]    = prov or "-"
        registro["DISTRITO"]     = dist or "-"

        # üìç Mensaje con mapa y botones de confirmaci√≥n/correcci√≥n
        mensaje_ubicacion = (
            f"‚úÖ üìç *Ubicaci√≥n CTO/NAP/FAT confirmada:* ({lat:.6f}, {lng:.6f})\n"
            f"üß≠ *Lugar de Incidencia:* {registro['DEPARTAMENTO']}, "
            f"{registro['PROVINCIA']}, {registro['DISTRITO']}\n"
            f"üåç [Ver ubicaci√≥n CTO](https://maps.google.com/?q={lat},{lng})"
        )

        keyboard = [[
            InlineKeyboardButton("‚úÖ Confirmar", callback_data=f"CONFIRMAR_{paso}"),
            InlineKeyboardButton("‚úèÔ∏è Corregir",  callback_data=f"CORREGIR_{paso}"),
        ]]

        await update.message.reply_text(
            mensaje_ubicacion,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=True
        )

        registro["PASO_ACTUAL"] = paso
        return "CONFIRMAR"


    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 4) FOTOS (cubre pasos de tipo 'foto' v√≠a PASOS)
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if paso_cfg["tipo"] == "foto":
        _marcar_origen_resumen(registro)

        if "ID_REGISTRO" not in registro:
            registro["ID_REGISTRO"] = datetime.now().strftime("%Y%m%d%H%M%S")

        filename = f"{paso}_{registro['ID_REGISTRO']}.jpg"
        file_bytes = None

        # Aceptar photo o document (imagen)
        if update.message.photo:
            photo = update.message.photo[-1]
            file = await photo.get_file()
            file_bytes = await file.download_as_bytearray()
        elif update.message.document and update.message.document.mime_type and update.message.document.mime_type.startswith("image/"):
            file = await update.message.document.get_file()
            file_bytes = await file.download_as_bytearray()
            filename = update.message.document.file_name or filename
        else:
            await update.message.reply_text("‚ö†Ô∏è Debe enviar una *foto* (imagen o archivo de imagen).")
            return paso

        # Subir (o procesar) la foto
        try:
            link_google = upload_image_to_google_drive(file_bytes, filename)  # ‚Üê tu funci√≥n
            if not link_google:
                await update.message.reply_text("‚ö†Ô∏è No se pudo procesar la foto, por favor vuelve a enviarla.")
                return paso
            # Guarda solo lo necesario para ahorrar RAM
            registro[paso] = link_google
            # Si deseas conservar bytes:
            # registro[f"{paso}_BYTES"] = file_bytes
        except Exception as e:
            logger.error(f"‚ùå Error subiendo imagen: {e}")
            await update.message.reply_text("‚ö†Ô∏è Hubo un problema con la foto. Intenta nuevamente.")
            return paso

        # Botonera
        keyboard = [[
            InlineKeyboardButton("‚úÖ Confirmar", callback_data=f"CONFIRMAR_{paso}"),
            InlineKeyboardButton("‚úèÔ∏è Corregir",  callback_data=f"CORREGIR_{paso}"),
        ]]
        await update.message.reply_text(
            "üì∏ Foto recibida. ¬øDeseas *confirmarla* o *volver a tomarla*?",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        registro["PASO_ACTUAL"] = paso
        return "CONFIRMAR"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 5) TEXTO gen√©rico (ej. OBSERVACION u otros campos de texto)
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if paso_cfg["tipo"] == "texto":
        # ‚öôÔ∏è Excepci√≥n clave: si el paso es OBS, no pedir texto sino abrir men√∫
        if paso == "OBS":
            logger.info("üü£ Derivando a men√∫ de observaciones desde bloque de texto")
            await mostrar_menu_obs(chat_id, context, tipo=None)
            registro["PASO_ACTUAL"] = "OBS_TIPO"
            return "OBS_TIPO"

        # ‚ö†Ô∏è Validaci√≥n normal de texto
        if not update.message or not update.message.text:
            await update.message.reply_text("‚ö†Ô∏è Solo se acepta *texto* en este paso.")
            return paso

        _marcar_origen_resumen(registro)

        valor = update.message.text.strip()
        registro[paso] = valor

        # üîò Confirmar / Corregir botones
        keyboard = [[
            InlineKeyboardButton("‚úÖ Confirmar", callback_data=f"CONFIRMAR_{paso}"),
            InlineKeyboardButton("‚úèÔ∏è Corregir",  callback_data=f"CORREGIR_{paso}"),
        ]]
        await update.message.reply_text(
            f"üìù *{paso.replace('_',' ')}* registrado:\n{valor}\n\n¬øConfirmas o corriges?",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        registro["PASO_ACTUAL"] = paso
        return "CONFIRMAR"

    # Por si acaso
    await update.message.reply_text("‚ö†Ô∏è Paso no reconocido. Intenta nuevamente.")
    return paso


# ============================================================
# ‚úÖ CONFIRMAR_<PASO> ‚Üí separa flujos (resumen vs normal)
# ============================================================
async def manejar_confirmar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚úÖ Confirmando...")
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})
    _, paso = query.data.split("CONFIRMAR_", 1) if "CONFIRMAR_" in query.data else ("CONFIRMAR", registro.get("PASO_ACTUAL", ""))

    # üü¢ Si se confirma la observaci√≥n ‚Üí mostrar resumen limpio
    if paso == "OBS":
        logger.info("‚úÖ [CONFIRMAR_OBS] Confirmando observaci√≥n y mostrando resumen final")

        # üßπ Eliminar mensaje del men√∫ anterior
        old_menu_id = registro.pop("ULTIMO_MENSAJE_MENU", None)
        if old_menu_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=old_menu_id)
            except Exception:
                pass

        # üßπ Eliminar tambi√©n el mensaje anterior de confirmaci√≥n de observaci√≥n (si existe)
        try:
            await query.delete_message()
        except Exception:
            pass

        # ‚úÖ Mostrar confirmaci√≥n √∫nica
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ Observaci√≥n seleccionada correctamente.",
            parse_mode="Markdown"
        )

        # üßæ Luego mostrar resumen final
        await mostrar_resumen_final(update, context)
        return "RESUMEN_FINAL"

    # ============================================================
    # üü¢ 1) CORRECCI√ìN DESDE RESUMEN FINAL
    # ============================================================
    if registro.get("CORRECCION_ORIGEN") == "RESUMEN":
        tipo_paso = PASOS.get(paso, {}).get("tipo", "")
        if tipo_paso == "foto":
            msg = "üì∏ *Foto corregida correctamente.*"
        else:
            msg = "‚úÖ *Campo corregido correctamente.*"

        try:
            await query.edit_message_text(msg, parse_mode="Markdown")
        except Exception:
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")

        registro["CORRECCION_ORIGEN"] = None
        registro["VOLVER_A_RESUMEN"] = False
        registro["EN_CORRECCION"] = False
        registro["PASO_ACTUAL"] = "RESUMEN_FINAL"

        await mostrar_resumen_final(update, context)
        return "RESUMEN_FINAL"

    # ============================================================
    # üü° 2) FLUJO REGULAR (captura normal de datos)
    # ============================================================
    tipo = PASOS.get(paso, {}).get("tipo")
    siguiente = PASOS.get(paso, {}).get("siguiente")

    # üì∏ Si es foto (FOTO_CAJA, FOTO_CAJA_ABIERTA o FOTO_MEDICION)
    if tipo == "foto":
        try:
            await query.edit_message_text("‚úÖ Foto subida correctamente.", parse_mode="Markdown")
        except Exception:
            await context.bot.send_message(chat_id=chat_id, text="‚úÖ Foto subida correctamente.", parse_mode="Markdown")

        if siguiente and siguiente != "OBS":
            registro["PASO_ACTUAL"] = siguiente
            instruccion = PASOS.get(siguiente, {}).get(
                "instruccion",
                PASOS.get(siguiente, {}).get("mensaje", f"‚û°Ô∏è Contin√∫a con *{siguiente.replace('_',' ')}*")
            )
            await context.bot.send_message(chat_id=chat_id, text=instruccion, parse_mode="Markdown")
            return siguiente

        # Si siguiente es OBS ‚Üí abrir men√∫ de observaciones
        if siguiente == "OBS":
            registro["PASO_ACTUAL"] = "OBS_TIPO"

            # üßπ Limpiar mensajes anteriores
            await limpiar_mensaje_anterior(context, chat_id, registro)

            msg = await context.bot.send_message(
                chat_id=chat_id,
                text="üìã Usa el men√∫ para elegir el tipo de observaci√≥n:",
                parse_mode="Markdown"
            )
            registro["ULTIMO_MENSAJE_MENU"] = msg.message_id

            await mostrar_menu_obs(chat_id, context, tipo=registro.get("OBS_TIPO") or None)
            return "OBS_TIPO"

    # ‚úèÔ∏è Si es texto o ubicaci√≥n
    elif tipo in ("texto", "ubicacion"):
        if siguiente:
            registro["PASO_ACTUAL"] = siguiente
            instruccion = PASOS.get(siguiente, {}).get(
                "instruccion",
                PASOS.get(siguiente, {}).get("mensaje", f"‚û°Ô∏è Contin√∫a con *{siguiente.replace('_',' ')}*")
            )
            await context.bot.send_message(chat_id=chat_id, text=instruccion, parse_mode="Markdown")
            return siguiente

    # ============================================================
    # üîö Si no hay m√°s pasos, ir al men√∫ de observaciones
    # ============================================================
    registro["PASO_ACTUAL"] = "OBS_TIPO"
    await limpiar_mensaje_anterior(context, chat_id, registro)
    msg = await context.bot.send_message(chat_id=chat_id, text="üìã Usa el men√∫ para elegir el tipo de observaci√≥n:", parse_mode="Markdown")
    registro["ULTIMO_MENSAJE_MENU"] = msg.message_id
    await mostrar_menu_obs(chat_id, context, tipo=None)
    return "OBS_TIPO"


# ============================================================
# ‚úèÔ∏è CORREGIR_<PASO> ‚Üí puede venir de flujo normal o del resumen
# ============================================================
async def manejar_corregir_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚úèÔ∏è Corrigiendo...")
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})
    _, paso = query.data.split("CORREGIR_", 1) if "CORREGIR_" in query.data else ("CORREGIR", registro.get("PASO_ACTUAL", ""))

    # ‚öôÔ∏è si NO venimos de resumen, es correcci√≥n dentro del flujo normal

     # ‚úÖ Si venimos del resumen, marcamos el origen para volver luego
    if registro.get("VOLVER_A_RESUMEN", False):
        registro["CORRECCION_ORIGEN"] = "RESUMEN"
    if not registro.get("VOLVER_A_RESUMEN", False):
        registro["EN_CORRECCION"] = True   # ‚Üê para que al confirmar avance al siguiente paso
    registro["PASO_ACTUAL"] = paso

    tipo = PASOS.get(paso, {}).get("tipo", "texto")

    # caso especial: OBS ‚Üí abre men√∫
    if paso == "OBS":
        registro["PASO_ACTUAL"] = "OBS_TIPO"
        await context.bot.send_message(
            chat_id=chat_id,
            text="üß≠ Corrige la *observaci√≥n* seleccionando nuevamente el tipo de elemento:",
            parse_mode="Markdown",
        )
        await mostrar_menu_obs(chat_id, context, tipo=None)
        return "OBS_TIPO"

    # mensajes por tipo
    mensajes = {
        "texto": f"‚úèÔ∏è Ingresa nuevamente el *{paso.replace('_', ' ')}*: ",
        "foto": "üì∏ Env√≠a nuevamente la *foto solicitada*: ",
        "ubicacion": "üìç Env√≠a nuevamente la *ubicaci√≥n GPS* de la CTO/NAP/FAT: ",
    }

    # ‚úÖ corregido el error de f-string
    mensaje_default = f"‚úèÔ∏è Ingresa nuevamente *{paso.replace('_', ' ')}*:"
    texto = f"{mensajes.get(tipo, mensaje_default)}\n\nüîÅ Despu√©s confirma para continuar."

    await context.bot.send_message(
        chat_id=chat_id,
        text=texto,
        parse_mode="Markdown",
    )
    return paso


# ============================================================
# ‚úèÔ∏è MANEJAR CORRECCIONES DESDE EL RESUMEN FINAL
# ============================================================
async def manejar_edicion_desde_resumen_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})
    await query.answer("‚úèÔ∏è Corrigiendo campo...")

    # üßπ Limpiar botones del mensaje anterior
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    # üîç Identificar el campo a corregir
    data = query.data
    if data.startswith("EDITAR_"):
        paso = data.replace("EDITAR_", "")
    elif data.startswith("CORREGIR_"):
        paso = data.replace("CORREGIR_", "")
    else:
        paso = registro.get("PASO_ACTUAL", "")

    logger.info(f"‚úèÔ∏è [RESUMEN_FINAL] Iniciando correcci√≥n del campo: {paso}")

    # üß≠ Marcar banderas de correcci√≥n
    registro["CORRECCION_ORIGEN"] = "RESUMEN"
    registro["VOLVER_A_RESUMEN"] = True
    registro["EN_CORRECCION"] = True
    registro["PASO_ACTUAL"] = paso

    # ============================================================
    # üü° CASO ESPECIAL: Observaci√≥n ‚Üí mostrar men√∫ autom√°tico
    # ============================================================
    if paso in ("OBS", "OBS_TIPO", "OBS_SELECCION"):
        registro["PASO_ACTUAL"] = "OBS_TIPO"
        registro["CORRECCION_ORIGEN"] = "RESUMEN"
        registro["VOLVER_A_RESUMEN"] = True
        registro["EN_CORRECCION"] = True

        # üí¨ Mostrar inmediatamente el men√∫ CTO/NAP/FAT
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìã Usa el men√∫ para elegir el tipo de observaci√≥n:",
            parse_mode="Markdown"
        )
        await mostrar_menu_obs(chat_id, context, tipo=None)
        logger.info("üü¢ [RESUMEN_FINAL] Men√∫ de observaciones desplegado autom√°ticamente")
        registro["PASO_ACTUAL"] = "OBS_TIPO"
        return "OBS_TIPO"

    # ============================================================
    # üîπ Otros campos ‚Üí pedir nuevo valor normalmente
    # ============================================================

    # üñºÔ∏è Si el paso es una de las nuevas fotos, mostrar mensaje espec√≠fico
    if paso in ("FOTO_CAJA_ABIERTA", "FOTO_MEDICION"):
        texto = f"üì∏ Env√≠a nuevamente la *{paso.replace('_',' ').title()}*."
        try:
            await context.bot.send_message(chat_id=chat_id, text=texto, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"‚ùå Error mostrando instrucci√≥n de correcci√≥n ({paso}): {e}")
        return paso


    tipo = PASOS.get(paso, {}).get("tipo", "texto")
    instruccion = PASOS.get(paso, {}).get(
        "instruccion", f"‚úèÔ∏è Env√≠a el nuevo valor para *{paso.replace('_',' ')}*:"
    )

    if tipo == "foto":
        texto = f"üì∏ Env√≠a nuevamente la *foto de {paso.replace('_',' ')}*."
    elif tipo == "ubicacion":
        texto = "üìç Env√≠a la *nueva ubicaci√≥n (GPS)* de la CTO/NAP/FAT."
    elif tipo == "texto":
        texto = f"‚úèÔ∏è Env√≠a el nuevo *{paso.replace('_',' ')}*."
    else:
        texto = instruccion

    try:
        await context.bot.send_message(chat_id=chat_id, text=texto, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"‚ùå Error mostrando instrucci√≥n de correcci√≥n ({paso}): {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"‚úèÔ∏è Env√≠a el nuevo valor para {paso}.")

    # üîÅ Retornar el mismo estado que se corrige
    logger.info(f"‚úèÔ∏è [RESUMEN_FINAL] Esperando nueva entrada para el paso: {paso}")
    return paso


# ============================================================
# üìã MEN√ö DE OBSERVACIONES (CTO / NAP / FAT) ‚Äî versi√≥n final limpia y estable
# ============================================================
async def mostrar_menu_obs(chat_id, context, tipo: str | None = None, query=None):
    registro = context.user_data.setdefault("registro", {})
    es_flotante = query is not None

    # üîπ Men√∫ principal
    if not tipo or tipo in ("None", "", None):
        keyboard = [
            [InlineKeyboardButton("üüß CTO", callback_data="OBS_TIPO_CTO")],
            [InlineKeyboardButton("üü¶ NAP", callback_data="OBS_TIPO_NAP")],
            [InlineKeyboardButton("üü© FAT", callback_data="OBS_TIPO_FAT")],
        ]
        texto = "üß© *Selecciona el tipo de elemento* para registrar la observaci√≥n:"
        markup = InlineKeyboardMarkup(keyboard)

        old_msg_id = registro.pop("ULTIMO_MENSAJE_OBS", None)
        if old_msg_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=old_msg_id)
            except Exception:
                pass

        msg = (await query.edit_message_text(texto, reply_markup=markup, parse_mode="Markdown")
               if es_flotante else
               await context.bot.send_message(chat_id=chat_id, text=texto, reply_markup=markup, parse_mode="Markdown"))

        registro["ULTIMO_MENSAJE_OBS"] = msg.message_id
        registro["PASO_ACTUAL"] = "OBS_TIPO"
        return "OBS_TIPO"

    # üîπ Submen√∫ CTO / NAP / FAT
    opciones = OBS_OPCIONES.get(tipo, [])
    if not opciones:
        texto = f"‚ö†Ô∏è No hay observaciones definidas para *{tipo}*."
        try:
        # ‚úÖ Enviamos siempre un nuevo mensaje (ya no editamos el anterior)
            await context.bot.send_message(
                chat_id=chat_id,
                text=texto,
                reply_markup=markup,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"‚ùå Error mostrando submen√∫ {tipo}: {e}")

        return "OBS_TIPO"

    keyboard = [[InlineKeyboardButton(obs, callback_data=f"OBS_SET_{idx}")]
                for idx, obs in enumerate(opciones)]
    keyboard.append([InlineKeyboardButton("üîô Volver", callback_data="OBS_BACK")])

    texto = f"üìù *Selecciona la observaci√≥n correspondiente a {tipo}:*"
    markup = InlineKeyboardMarkup(keyboard)

    old_msg_id = registro.pop("ULTIMO_MENSAJE_OBS", None)
    if old_msg_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=old_msg_id)
        except Exception:
            pass

    # ‚úÖ Enviamos siempre un nuevo mensaje (ya no editamos el anterior)
    msg = await context.bot.send_message(
        chat_id=chat_id,
        text=texto,
        reply_markup=markup,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

    registro["ULTIMO_MENSAJE_OBS"] = msg.message_id
    registro["PASO_ACTUAL"] = "OBS_SELECCION"
    return "OBS_SELECCION"


# ================== RESUMEN FINAL (versi√≥n mejorada y sincronizada) ==================
async def mostrar_resumen_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        reg = context.user_data.get("registro", {})  # <- SIEMPRE dict
        chat_id = update.effective_chat.id
        bot = context.bot

        # üßπ Eliminar mensaje anterior si ya exist√≠a un resumen previo
        old_msg_id = reg.pop("ULTIMO_MENSAJE_RESUMEN", None)
        if old_msg_id:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=old_msg_id)
                logger.info("üßπ Mensaje viejo de resumen eliminado correctamente.")
            except Exception:
                logger.debug("‚ö†Ô∏è No se pudo eliminar el mensaje anterior (ya borrado o editado).")

        # Valores seguros
        ticket       = reg.get("TICKET", "-")
        dni          = reg.get("DNI", "-")
        cliente      = reg.get("NOMBRE_CLIENTE", "-")
        cuadrilla    = reg.get("CUADRILLA", "-")
        partner      = reg.get("PARTNER", "-")
        nodo         = reg.get("NODO", "-")
        cod_caja     = reg.get("CODIGO_CAJA", "-")
        lat          = reg.get("LAT_CAJA")
        lng          = reg.get("LNG_CAJA")
        dep          = reg.get("DEPARTAMENTO", "-")
        prov         = reg.get("PROVINCIA", "-")
        dist         = reg.get("DISTRITO", "-")
        observacion  = reg.get("OBSERVACION", reg.get("OBS", "-"))

        # Coordenadas visibles
        coord_txt = f"({lat}, {lng})" if (lat is not None and lng is not None) else "(-, -)"
        link_mapa = f"https://maps.google.com/?q={lat},{lng}" if (lat and lng) else None

        # üìã Texto del resumen
        resumen = (
            "üìã *Resumen de la incidencia*\n\n"
            f"üé´ *Ticket:* `{ticket}`\n"
            f"ü™™ *DNI:* {dni}\n"
            f"üë§ *Cliente:* {cliente}\n"
            f"üë∑ *Cuadrilla:* {cuadrilla}\n"
            f"üè¢ *Partner:* {partner}\n"
            f"üè∑ *C√≥digo CTO/NAP/FAT:* {cod_caja}\n"
            f"üì° *Nodo:* {nodo}\n"
            f"üìç *Coordenadas:* {coord_txt}\n"
            f"üß≠ *Lugar:* {prov}, {dep}, {dist}\n"
        )
        if link_mapa:
            resumen += f"[üåê Ver ubicaci√≥n CTO/NAP/FAT]({link_mapa})\n"

        foto_ok = "‚úÖ" if reg.get("FOTO_CAJA") else "‚ùå"
        foto_open_ok = "‚úÖ" if reg.get("FOTO_CAJA_ABIERTA") else "‚ùå"
        foto_med_ok = "‚úÖ" if reg.get("FOTO_MEDICION") else "‚ùå"

        resumen += f"üì∏ *Foto CTO/NAP/FAT (Exterior):* {foto_ok}\n"
        resumen += f"üì∏ *Foto CTO/NAP/FAT (Interior):* {foto_open_ok}\n"
        resumen += f"üì∏ *Foto CTO/NAP/FAT (Medici√≥n):* {foto_med_ok}\n"
        resumen += f"üìù *Observaciones:* {observacion}\n\n"
        resumen += "¬øDeseas confirmar tu registro?"

        # üîò Botonera
        keyboard = [
            [InlineKeyboardButton("‚úÖ Guardar", callback_data="FINAL_GUARDAR")],
            [InlineKeyboardButton("‚úèÔ∏è Corregir", callback_data="FINAL_CORREGIR")],
            [InlineKeyboardButton("‚ùå Cancelar", callback_data="FINAL_CANCELAR")],
        ]

        markup = InlineKeyboardMarkup(keyboard)

        # üì§ Mostrar resumen: callback o mensaje directo (con fallback seguro)
        if getattr(update, "callback_query", None):
            try:
                msg = await update.callback_query.edit_message_text(
                    resumen,
                    parse_mode="Markdown",
                    reply_markup=markup,
                    disable_web_page_preview=True,
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è No se pudo editar mensaje previo: {e} ‚Üí enviando nuevo mensaje.")
                msg = await bot.send_message(
                    chat_id=chat_id,
                    text=resumen,
                    parse_mode="Markdown",
                    reply_markup=markup,
                    disable_web_page_preview=True,
                )
        else:
            msg = await update.message.reply_text(
                resumen,
                parse_mode="Markdown",
                reply_markup=markup,
                disable_web_page_preview=True,
            )

        # üß† Guardar el nuevo mensaje y estado
        reg["ULTIMO_MENSAJE_RESUMEN"] = msg.message_id
        reg["PASO_ACTUAL"] = "RESUMEN_FINAL"

        logger.info("üßæ Resumen final mostrado correctamente.")
        return "RESUMEN_FINAL"

    except Exception as e:
        logger.error(f"‚ùå Error en mostrar_resumen_final: {e}")
        try:
            await context.bot.send_message(update.effective_chat.id, f"‚ö†Ô∏è Error mostrando resumen: {e}")
        except Exception:
            pass
        return ConversationHandler.END


# ============================================================
# üìã CALLBACK: Acciones dentro del RESUMEN FINAL (versi√≥n limpia y estable)
# ============================================================
async def resumen_final_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    accion = query.data
    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})

    # üîπ Limpieza b√°sica de botones
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    # ============================================================
    # üíæ GUARDAR REGISTRO
    # ============================================================
    if accion == "FINAL_GUARDAR":
        await query.answer("üíæ Guardando...")
        logger.info("üíæ [RESUMEN_FINAL] Guardando registro desde resumen final")
        return await guardar_registro(update, context)

    # ============================================================
    # ‚úèÔ∏è CORREGIR (abrir men√∫ de correcciones limpio)
    # ============================================================
    if accion == "FINAL_CORREGIR":
        await query.answer("‚úèÔ∏è Elige un campo a corregir")

        texto = "‚úèÔ∏è *Selecciona el campo que deseas corregir:*"
        keyboard = [
            [InlineKeyboardButton("üé´ Ticket", callback_data="EDITAR_TICKET")],
            [InlineKeyboardButton("üè∑ C√≥digo CTO/NAP/FAT", callback_data="EDITAR_CODIGO_CAJA")],
            [InlineKeyboardButton("üìç Ubicaci√≥n CTO/NAP/FAT", callback_data="EDITAR_UBICACION_CTO")],
            [InlineKeyboardButton("üì∏ Foto CTO/NAP/FAT (Exterior)", callback_data="EDITAR_FOTO_CAJA")],
            [InlineKeyboardButton("üì∏ Foto CTO/NAP/FAT (Interior)", callback_data="EDITAR_FOTO_CAJA_ABIERTA")],
            [InlineKeyboardButton("üì∏ Foto CTO/NAP/FAT (Medici√≥n)", callback_data="EDITAR_FOTO_MEDICION")],
            [InlineKeyboardButton("üìù Observaci√≥n", callback_data="EDITAR_OBS")],
        ]

        await context.bot.send_message(
            chat_id=chat_id,
            text=texto,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        registro["VOLVER_A_RESUMEN"] = True
        registro["EN_CORRECCION"] = True
        registro["PASO_ACTUAL"] = "CORREGIR"
        return "CORREGIR"

    # ============================================================
    # ‚ùå CANCELAR REGISTRO
    # ============================================================
    if accion == "FINAL_CANCELAR":
        await query.answer("‚ùå Cancelado")
        try:
            await query.edit_message_text("‚ùå Registro cancelado por el usuario.")
        except Exception:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå Registro cancelado por el usuario.")
        context.user_data.pop("registro", None)
        return ConversationHandler.END

    # ============================================================
    # üö´ Cualquier otra acci√≥n desconocida
    # ============================================================
    await query.answer("‚ö†Ô∏è Acci√≥n no reconocida.")
    logger.warning(f"‚ö†Ô∏è Acci√≥n desconocida en resumen_final_callback: {accion}")
    return "RESUMEN_FINAL"

# ============================================================
# üîô CALLBACK: VOLVER DESDE MEN√ö DE CORRECCIONES ‚Üí RESUMEN FINAL
# ============================================================
async def manejar_volver_desde_resumen_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})

    await query.answer("‚Ü©Ô∏è Volviendo al resumen final...")

    # üßπ Limpieza visual (elimina botones previos)
    try:
        await query.edit_message_text("üîÑ Volviendo al resumen final...", parse_mode="Markdown")
    except Exception:
        pass

    # üß† Restaurar contexto
    registro["PASO_ACTUAL"] = "RESUMEN_FINAL"
    registro["EN_CORRECCION"] = False
    registro["VOLVER_A_RESUMEN"] = False

    logger.info("üîô [VOLVER] Regresando correctamente al Resumen Final")

    # ‚úÖ Mostrar nuevamente el resumen
    try:
        await mostrar_resumen_final(update, context)
    except Exception as e:
        logger.error(f"‚ùå Error mostrando resumen: {e}")
        await context.bot.send_message(chat_id, "‚ö†Ô∏è No se pudo mostrar el resumen final, intenta nuevamente.")

    return "RESUMEN_FINAL"


# ============================================================
# üß≠ CALLBACK: manejar_tipo_obs_callback (versi√≥n robusta con BACK funcional)
# ============================================================
async def manejar_tipo_obs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})

    logger.info(f"üü¢ [OBS_TIPO] Callback recibido: {data}")

    # üîô Volver al men√∫ principal CTO/NAP/FAT
    if data in ("OBS_TIPO_BACK", "OBS_BACK"):
        logger.info("üîô [OBS_TIPO] Volviendo al men√∫ principal CTO/NAP/FAT")

        # üîπ Limpieza de botones previos
        try:
            await query.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass

        await asyncio.sleep(0.3)

        # üîπ Intentar mostrar el men√∫ principal
        try:
            await mostrar_menu_obs(chat_id, context, tipo=None)
            logger.info("üìã Men√∫ principal CTO/NAP/FAT mostrado correctamente.")
        except Exception as e:
            logger.error(f"‚ùå Error al volver al men√∫ principal: {e}")
            await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è No se pudo mostrar el men√∫ principal de observaciones. Intenta nuevamente.", parse_mode="Markdown",)

        registro["PASO_ACTUAL"] = "OBS_TIPO"
        return "OBS_TIPO"


    # üî∏ Selecci√≥n de tipo CTO/NAP/FAT
    if data.startswith("OBS_TIPO_"):
        tipo = data.replace("OBS_TIPO_", "")
        registro["OBS_TIPO"] = tipo
        logger.info(f"‚úÖ [OBS_TIPO] Tipo de observaci√≥n seleccionado: {tipo}")
        await mostrar_menu_obs(chat_id, context, tipo=tipo, query=query)
        registro["PASO_ACTUAL"] = "OBS_SELECCION"
        return "OBS_SELECCION"

    # üß© Seguridad extra: si algo no coincide, mantenemos OBS_TIPO activo
    return registro.get("PASO_ACTUAL", "OBS_TIPO")


# ============================================================
# üìù CALLBACK: Manejar selecci√≥n de observaci√≥n espec√≠fica (versi√≥n limpia sin bot√≥n extra)
# ============================================================
async def manejar_observacion_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # üßπ Eliminar mensaje del men√∫ anterior (para que no quede flotando)
    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})
    old_menu_id = registro.pop("ULTIMO_MENSAJE_MENU", None)
    if old_menu_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=old_menu_id)
        except Exception:
            pass

    data = query.data
    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})

    logger.info(f"üü¢ [OBS_SET] Callback recibido: {data}")

    tipo_actual = registro.get("OBS_TIPO", "CTO")
    opciones = OBS_OPCIONES.get(tipo_actual, [])
    try:
        idx = int(data.replace("OBS_SET_", ""))
        observacion = opciones[idx] if idx < len(opciones) else None
    except Exception:
        observacion = None

    if not observacion:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è No se pudo identificar la observaci√≥n seleccionada. Intenta nuevamente.",
            parse_mode="Markdown",
        )
        return "OBS_TIPO"

    # üßæ Guardar observaci√≥n
    registro["OBSERVACION"] = observacion
    registro["PASO_ACTUAL"] = "OBS_CONFIRMAR"

    # ‚úÖ Mostrar confirmaci√≥n y botones
    texto = f"‚úÖ *Observaci√≥n registrada:* {observacion}\n\n¬øDeseas confirmar o corregir?"
    markup = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ Confirmar", callback_data="CONFIRMAR_OBS"),
            InlineKeyboardButton("‚úèÔ∏è Corregir", callback_data="CORREGIR_OBS")
        ]
    ])

    try:
        await query.edit_message_text(text=texto, parse_mode="Markdown", reply_markup=markup)
    except Exception as e:
        logger.error(f"‚ùå Error mostrando botones de confirmaci√≥n OBS: {e}")
        await context.bot.send_message(chat_id=chat_id, text=texto, parse_mode="Markdown", reply_markup=markup)

    return "CONFIRMAR"


# ============================================================
# üìã CALLBACK: Ir directamente al RESUMEN FINAL despu√©s de OBS
# ============================================================
async def manejar_ir_resumen_final_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("üìÑ Mostrando resumen final...")

    chat_id = query.message.chat_id
    registro = context.user_data.setdefault("registro", {})
    registro["PASO_ACTUAL"] = "RESUMEN_FINAL"
    registro["EN_CORRECCION"] = False
    registro["VOLVER_A_RESUMEN"] = False

    try:
        await mostrar_resumen_final(update, context)
    except Exception as e:
        logger.error(f"‚ùå Error mostrando resumen desde OBS: {e}")
        await context.bot.send_message(chat_id, "‚ö†Ô∏è No se pudo mostrar el resumen final.")

    return "RESUMEN_FINAL"


# ============= GUARDAR REGISTRO ====================
async def guardar_registro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Guarda el registro del t√©cnico en OneDrive (Excel) y refleja el resultado en Google Sheets.
    Maneja errores de red, bloqueos y duplicados con tolerancia total.
    """
    try:
        registro = context.user_data.get("registro", {})  # ‚úÖ ahora se llama igual que en el resto del flujo
        chat_id = update.effective_chat.id

        if not registro:
            await context.bot.send_message(update.effective_chat.id, "‚ö†Ô∏è No hay datos de registro activos.")
            return ConversationHandler.END

        # üßπ Eliminar mensaje del resumen anterior (para que no quede duplicado)
        old_msg_id = registro.pop("ULTIMO_MENSAJE_RESUMEN", None)
        if old_msg_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=old_msg_id)
                logger.info("üßπ Resumen de incidencia eliminado antes de mostrar el mensaje final.")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è No se pudo eliminar el mensaje del resumen final: {e}")

        # üßë‚Äçüíª Datos del usuario
        user = update.effective_user
        registro["USER_ID"] = user.id
        registro["USUARIO"] = user.full_name or "-"
        registro["USERNAME"] = user.username or "-"

        # üïí Fecha y hora actual
        fecha, hora = get_fecha_hora()
        registro["FECHA"] = fecha
        registro["HORA"] = hora

        # üåç Geocodificaci√≥n si falta
        if not registro.get("DEPARTAMENTO") or not registro.get("PROVINCIA") or not registro.get("DISTRITO"):
            lat, lng = registro.get("LAT_CAJA"), registro.get("LNG_CAJA")
            if lat and lng:
                dep, prov, dist = geocodificar(lat, lng)
                if dep != "-" or prov != "-" or dist != "-":
                    registro["DEPARTAMENTO"] = dep
                    registro["PROVINCIA"] = prov
                    registro["DISTRITO"] = dist

        # üîπ Normalizaci√≥n de datos
        nodo_val = registro.get("NODO", "-")
        foto_val = registro.get("FOTO_CAJA", "")
        foto_bytes = registro.get("FOTO_CAJA_BYTES")

        # üìù Corregimos observaci√≥n (si viene de men√∫)
        registro["OBS"] = registro.get("OBSERVACION", registro.get("OBS", "-"))

        # üßæ Fila completa (coincide con tus encabezados)
        fila = [
            registro.get("USER_ID", ""),
            registro.get("FECHA", ""),
            registro.get("HORA", ""),
            registro.get("PARTNER", "-"),
            registro.get("CUADRILLA", "-"),
            registro.get("TICKET", ""),
            registro.get("DNI", "-"),
            registro.get("NOMBRE_CLIENTE", "-"),
            registro.get("NODO", "-"),
            registro.get("CODIGO_CAJA", ""),
            registro.get("FOTO_CAJA", ""),
            registro.get("FOTO_CAJA_ABIERTA"),
            registro.get("FOTO_MEDICION"),
            registro.get("LAT_CAJA", ""),
            registro.get("LNG_CAJA", ""),
            registro.get("DEPARTAMENTO", ""),
            registro.get("PROVINCIA", ""),
            registro.get("DISTRITO", ""),
            registro.get("OBS", "-"),
        ]

        # ==========================================
        # ‚òÅÔ∏è Guardar registro solo en Google Sheets
        # ==========================================
        msg_guardando = await context.bot.send_message(
            update.effective_chat.id,
            "üíæ Guardando registro..."
        )


        try:
            gs_append_row(fila)
            logger.info("‚úÖ Registro guardado correctamente en Google Sheets.")
        except Exception as e:
            logger.error(f"‚ùå Error guardando en Google Sheets: {e}")

        # üßπ Eliminar mensaje de ‚ÄúGuardando...‚Äù
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_guardando.message_id)
        except Exception:
            pass

        # ==========================================
        # üìã Resumen visual (enviado al t√©cnico y supervisi√≥n)
        # ==========================================
        lat = registro.get("LAT_CAJA", "-")
        lng = registro.get("LNG_CAJA", "-")
        dep = registro.get("DEPARTAMENTO", "-")
        prov = registro.get("PROVINCIA", "-")
        dist = registro.get("DISTRITO", "-")
        link_mapa = f"https://maps.google.com/?q={lat},{lng}"

        resumen_final = (
            "‚úÖ *Registro guardado exitosamente*\n\n"
            f"üé´ *Ticket:* `{registro.get('TICKET', '-')}`\n"
            f"ü™™ *DNI:* {registro.get('DNI', '-')}\n"
            f"üë§ *Cliente:* {registro.get('NOMBRE_CLIENTE', '-')}\n"
            f"üë∑ *Cuadrilla:* {registro.get('CUADRILLA', '-')}\n"
            f"üè¢ *Partner:* {registro.get('PARTNER', '-')}\n"
            f"üè∑ *C√≥digo CTO/NAP/FAT:* {registro.get('CODIGO_CAJA', '-')}\n"
            f"üì° *Nodo:* {registro.get('NODO', '-')}\n"
            f"üìç *Coordenadas:* ({lat}, {lng})\n"
            f"üß≠ *Ubicaci√≥n:* {prov}, {dep}, {dist}\n"
            f"[üåê Ver ubicaci√≥n CTO]({link_mapa})\n"
            f"üì∏ *Foto CTO/NAP/FAT (Exterior):* ‚úÖ\n"
            f"üì∏ *Foto CTO/NAP/FAT (Interior):* ‚úÖ\n"
            f"üì∏ *Foto CTO/NAP/FAT (Medici√≥n):* ‚úÖ\n"          
            f"üìù *Observaciones:* {registro.get('OBS', '-')}"
        )

        # üì≤ Enviar al t√©cnico
        msg_final = await context.bot.send_message(chat_id, resumen_final, parse_mode="Markdown")
        registro["ULTIMO_MENSAJE_RESUMEN"] = msg_final.message_id  # opcional, por si se usa luego

        # üö® AQU√ç EST√Å EL PROBLEMA
        gs_append_row(fila)
        logger.info("‚úÖ Registro guardado correctamente en Google Sheets.")
        
        # üì¢ Enviar al grupo de supervisi√≥n (con foto)
        for grupo_id in GRUPO_SUPERVISION_ID:
            try:
                await context.bot.send_message(chat_id=grupo_id, text=resumen_final, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"‚ùå Error enviando al grupo {grupo_id}: {e}")

        # ==========================================
        # üßπ LIMPIEZA DE MEMORIA TRAS REGISTRO EXITOSO
        # ==========================================
        try:

            # üîÑ Liberar cualquier cach√© local o variable pesada
            for clave in ["FOTO_CAJA", "FOTO_CAJA_ABIERTA", "FOTO_MEDICION"]:
                if clave in registro:
                    registro[clave] = None

            # üßπ Borrar completamente el diccionario del usuario
            context.user_data.pop("registro", None)

            # üßΩ Forzar liberaci√≥n de memoria
            import gc
            gc.collect()

            logger.info("üß† Memoria liberada tras registro exitoso en Render.")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error al limpiar memoria tras registro: {e}")

        # üöÄ Finalizar conversaci√≥n
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ùå Error general en guardar_registro: {e}")
        await context.bot.send_message(
            update.effective_chat.id,
            "‚ö†Ô∏è Ocurri√≥ un error al guardar. Contacta a soporte."
        )
        return ConversationHandler.END 

# ================== CANCEL ==================
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in GRUPO_SUPERVISION_ID:
        return ConversationHandler.END

    context.user_data.pop("registro", None)
    await update.message.reply_text("‚ùå Registro cancelado.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# ================== FUNCIONES AUXILIARES ==================
async def limpiar_mensaje_anterior(context, chat_id, registro, clave="ULTIMO_MENSAJE_MENU"):
    """
    Elimina el √∫ltimo mensaje auxiliar (como men√∫s o instrucciones repetidas)
    guardado en registro[clave].
    """
    old_id = registro.pop(clave, None)
    if old_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=old_id)
        except Exception:
            pass


# ============================
# üîÅ POLLING SEGURO CON REINTENTOS
# ============================
async def safe_polling(app):
    """
    Ejecuta el polling con reintentos progresivos si se cae la conexi√≥n.
    """
    intento = 1
    while True:
        try:
            logger.info("üöÄ Iniciando run_polling()...")
            await app.run_polling(allowed_updates=Update.ALL_TYPES)
        except NetworkError as e:
            espera = min(60, 15 * intento)
            logger.warning(f"üåê Error de red: {e}. Reintentando en {espera}s...")
            await asyncio.sleep(espera)
            intento += 1
        except Exception as e:
            logger.error(f"üí• Error inesperado en safe_polling: {e}")
            await asyncio.sleep(10)


def escape_markdown(text: str) -> str:
    """Evita errores de formato en MarkdownV2."""
    return re.sub(r'([_\*\[\]\(\)~`>\#\+\-=|{}\.!])', r'\\\1', str(text))

# ================== MAIN ==================
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ==========================
    # üîÅ CONVERSATION HANDLER
    # ==========================
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("registro", comando_registro),
        ],
        states={
            # ====== PASO 1: TICKET ======
            "TICKET": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: manejar_paso(u, c, "TICKET")),
            ],

            # ====== PASO 2: C√ìDIGO CTO/NAP/FAT ======
            "CODIGO_CAJA": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: manejar_paso(u, c, "CODIGO_CAJA")),
            ],

            # ====== PASO 3: UBICACI√ìN ======
            "UBICACION_CTO": [
                MessageHandler(filters.LOCATION, lambda u, c: manejar_paso(u, c, "UBICACION_CTO")),
            ],

            # ====== PASO 4: FOTO ======
            "FOTO_CAJA": [
                MessageHandler(filters.PHOTO | filters.Document.IMAGE, lambda u, c: manejar_paso(u, c, "FOTO_CAJA")),
            ],
            "FOTO_CAJA_ABIERTA": [
                MessageHandler(filters.PHOTO | filters.Document.IMAGE, lambda u, c: manejar_paso(u, c, "FOTO_CAJA_ABIERTA")),
            ],
            "FOTO_MEDICION": [
                MessageHandler(filters.PHOTO | filters.Document.IMAGE, lambda u, c: manejar_paso(u, c, "FOTO_MEDICION")),
            ],

            # ====== PASO 5: OBSERVACIONES ======
            "OBS": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: manejar_paso(u, c, "OBS")),
            ],

            # üëá Submen√∫s de observaciones
            "OBS_TIPO": [
                CallbackQueryHandler(manejar_tipo_obs_callback, pattern=r"^OBS_TIPO_.*$"),
                CallbackQueryHandler(manejar_tipo_obs_callback, pattern=r"^OBS_TIPO_BACK$"),
            ],
            "OBS_SELECCION": [
                CallbackQueryHandler(manejar_observacion_callback, pattern=r"^OBS_SET_.*$"),
                CallbackQueryHandler(manejar_tipo_obs_callback, pattern=r"^OBS_BACK$"),
            ],

            # ====== CONFIRMAR / CORREGIR / EDITAR ======
            "CONFIRMAR": [
                CallbackQueryHandler(manejar_confirmar_callback, pattern=r"^CONFIRMAR_.*$"),
                CallbackQueryHandler(manejar_corregir_callback, pattern=r"^CORREGIR_.*$"),
                CallbackQueryHandler(manejar_ir_resumen_final_callback, pattern=r"^IR_RESUMEN_FINAL$"),
                CallbackQueryHandler(manejar_edicion_desde_resumen_callback, pattern=r"^EDITAR_.*$"),
            ],
            # ====== CORREGIR (cuando viene desde resumen final) ======
            "CORREGIR": [
                CallbackQueryHandler(manejar_edicion_desde_resumen_callback, pattern=r"^EDITAR_.*$"),
                MessageHandler(filters.ALL, lambda u, c: manejar_paso(u, c, c.user_data.get("registro", {}).get("PASO_ACTUAL", ""))),
            ],
            # ====== RESUMEN FINAL ======
            "RESUMEN_FINAL": [
                CallbackQueryHandler(resumen_final_callback, pattern=r"^FINAL_.*$"),
                CallbackQueryHandler(manejar_edicion_desde_resumen_callback, pattern=r"^EDITAR_.*$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # ==========================
    # üîÅ JOBS Y HANDLERS EXTRA
    # ==========================
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("recargar", recargar_bases))

    # ==========================
    # üöÄ INICIO DEL BOT
    # ==========================
    logger.info("ü§ñ Bot de Incidencias iniciado correctamente...")

    try:
        # ‚úÖ M√°s seguro que asyncio.get_event_loop()
        import nest_asyncio
        nest_asyncio.apply()
        app.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        logger.warning("üõë Bot detenido manualmente.")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico en main(): {e}")

# ==============================
# üîé CARGAS INICIALES
# ==============================
if __name__ == "__main__":
    cargar_ordenes_trabajo()
    verificar_carpeta_imagenes_inicial()
    cargar_cajas_nodos()
    main()

